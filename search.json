[
  {
    "objectID": "snake-game/snake_game_gestos_explicacion.html",
    "href": "snake-game/snake_game_gestos_explicacion.html",
    "title": "Explicación del Código del Juego de la Serpiente en p5.js (Con gestos)",
    "section": "",
    "text": "Este código implementa un juego de la serpiente, donde el usuario puede controlar la dirección de la serpiente utilizando gestos capturados por la cámara o, alternativamente, mediante las teclas de flecha del teclado. A continuación se describe cómo funciona el código en detalle.\n\n\nlet imageModelURL = \"https://teachablemachine.withgoogle.com/models/rfrmQGqz_/\";\nlet keyboard_control = false;\nlet speed = 5;\n\nimageModelURL: Esta variable contiene la URL del modelo de Teachable Machine que se utilizará para el reconocimiento de gestos. Este modelo será cargado más adelante en el código.\nkeyboard_control: Define si la serpiente se controla con gestos (false) o con el teclado (true).\nspeed: Establece la velocidad del juego. Un valor más bajo significa que la serpiente se moverá más rápido.\n\n\n\n\nfunction preload() {\n  classifier = ml5.imageClassifier(imageModelURL + \"model.json\");\n}\n\npreload(): Esta función es parte del ciclo de p5.js y se ejecuta antes de setup(). Aquí se carga el modelo de Teachable Machine especificado por imageModelURL. El modelo se utilizará para clasificar las imágenes capturadas por la cámara y determinar la dirección en la que debe moverse la serpiente.\n\n\n\n\nfunction setup() {\n  createCanvas(640, 480);\n  video = createCapture(VIDEO);\n  video.size(320, 240);\n  video.hide();\n  \n  flippedVideo = ml5.flipImage(video);\n  classifyVideo();\n  \n  w = floor(width / rez);\n  h = floor(height / rez);\n  snake = new Snake();\n  foodLocation();\n}\n\nsetup():\n\nSe crea un Canvas de 640x480 píxeles para el juego.\nSe captura el video de la cámara y se ajusta su tamaño a 320x240 píxeles. Este video se oculta porque solo se utiliza para la clasificación.\nml5.flipImage(video): Invierte la imagen del video horizontalmente para que los gestos reflejen movimientos naturales.\nclassifyVideo(): Inicia el proceso de clasificación de video, lo que permite que el modelo detecte gestos en tiempo real.\nSe inicializa la serpiente en el centro del Canvas y se coloca la comida en una posición aleatoria.\n\n\n\n\n\nfunction classifyVideo() {\n  flippedVideo = ml5.flipImage(video);\n  classifier.classify(flippedVideo, gotResult);\n}\n\nclassifyVideo():\n\nVuelve a invertir la imagen del video.\nUtiliza el clasificador (classifier) para analizar el video invertido y determinar el gesto capturado. El resultado se maneja en la función gotResult.\n\n\n\n\n\nfunction gotResult(error, results) {\n  if (error) {\n    console.error(error);\n    return;\n  }\n  label = results[0].label;\n  controlSnake();\n  classifyVideo();\n}\n\ngotResult():\n\nSi ocurre un error durante la clasificación, se muestra en la consola.\nSi no hay error, se actualiza la etiqueta (label) con el resultado de la clasificación, que indica el gesto detectado (por ejemplo, “UP”, “DOWN”).\nSe llama a la función controlSnake() para ajustar la dirección de la serpiente según el gesto detectado.\nSe repite el proceso de clasificación para capturar el siguiente fotograma del video.\n\n\n\n\n\nfunction controlSnake() {\n  if (!keyboard_control) {\n    if (label === \"UP\") {\n      snake.setDir(0, -1);\n    } else if (label === \"RIGHT\") {\n      snake.setDir(1, 0);\n    } else if (label === \"LEFT\") {\n      snake.setDir(-1, 0);\n    } else if (label === \"DOWN\") {\n      snake.setDir(0, 1);\n    }\n  }\n}\n\ncontrolSnake():\n\nSi el control del teclado está desactivado (keyboard_control == false), la dirección de la serpiente se ajusta en función de la etiqueta (label) detectada por el modelo. Por ejemplo, si la etiqueta es “UP”, la serpiente se moverá hacia arriba.\n\n\n\n\n\nfunction draw() {\n  background(220);\n  if (!keyboard_control) {\n    image(flippedVideo, 0, 0, 160, 120);\n    textSize(32);\n    fill(255);\n    stroke(0);\n    text(label, 10, 40);\n  }\n\n  scale(rez);\n  if (snake.eat(food)) {\n    foodLocation();\n    snake.update();\n  }\n  if (frameCount % speed == 0) {\n    snake.update();\n  }\n  snake.show();\n\n  if (snake.endGame()) {\n    print(\"END GAME\");\n    background(255, 0, 0);\n    noLoop();\n  }\n\n  noStroke();\n  fill(255, 0, 0);\n  rect(food.x, food.y, 1, 1);\n}\n\ndraw():\n\nEl Canvas se refresca en cada fotograma.\nSi el control del teclado está desactivado, se muestra la imagen del video invertido junto con la etiqueta del gesto detectado.\nLa serpiente se escala y se dibuja en el Canvas.\nSi la serpiente come la comida, se genera una nueva ubicación para la comida, y la serpiente crece.\nLa velocidad del juego se controla mediante la variable speed, actualizando la posición de la serpiente en función del número de fotogramas.\nSi la serpiente choca con el borde o consigo misma, el juego termina.\n\n\n\n\n\nclass Snake {\n  constructor() {\n    this.body = [];\n    this.body[0] = createVector(floor(w/2), floor(h/2));\n    this.xdir = 0;\n    this.ydir = 0;\n    this.len = 0;\n  }\n\n  setDir(x, y) {\n    this.xdir = x;\n    this.ydir = y;\n  }\n\n  update() {\n    let head = this.body[this.body.length-1].copy();\n    this.body.shift();\n    head.x += this.xdir;\n    head.y += this.ydir;\n    this.body.push(head);\n  }\n\n  grow() {\n    let head = this.body[this.body.length-1].copy();\n    this.len++;\n    this.body.push(head);\n  }\n\n  endGame() {\n    let x = this.body[this.body.length-1].x;\n    let y = this.body[this.body.length-1].y;\n    if(x &gt; w-1 || x &lt; 0 || y &gt; h-1 || y &lt; 0) {\n       return true;\n    }\n    for(let i = 0; i &lt; this.body.length-1; i++) {\n      let part = this.body[i];\n      if(part.x == x && part.y == y) {\n          return true;\n      }\n    }\n    return false;\n  }\n\n  eat(pos) {\n    let x = this.body[this.body.length-1].x;\n    let y = this.body[this.body.length-1].y;\n    if(x == pos.x && y == pos.y) {\n      this.grow();\n      return true;\n    }\n    return false;\n  }\n\n  show() {\n    for(let i = 0; i &lt; this.body.length; i) {\n      fill(0);\n      noStroke();\n      rect(this.body[i].x, this.body[i].y, 1, 1);\n    }\n  }\n}\n\nSnake: Esta clase define la serpiente en el juego.\n\nConstructor: Inicializa la serpiente con un solo segmento ubicado en el centro del Canvas.\nsetDir(x, y): Cambia la dirección de la serpiente según los valores proporcionados para x e y.\nupdate(): Mueve la serpiente en la dirección actual, eliminando el segmento más antiguo y añadiendo uno nuevo en la posición actual de la cabeza.\ngrow(): Añade un nuevo segmento al cuerpo de la serpiente cada vez que come.\nendGame(): Verifica si la serpiente ha chocado con el borde del Canvas o consigo misma, en cuyo caso el juego termina.\neat(pos): Determina si la serpiente ha comido la comida, comprobando si la posición de la cabeza coincide con la de la comida.\nshow(): Dibuja cada segmento del cuerpo de la serpiente en el Canvas.\n\n\n\n\n\nPuedes descargar el código completo acá: Código fuente.",
    "crumbs": [
      "snake-game",
      "Explicación del Código del Juego de la Serpiente en p5.js (Con gestos)"
    ]
  },
  {
    "objectID": "snake-game/snake_game_gestos_explicacion.html#explicación-del-código",
    "href": "snake-game/snake_game_gestos_explicacion.html#explicación-del-código",
    "title": "Explicación del Código del Juego de la Serpiente en p5.js (Con gestos)",
    "section": "",
    "text": "Este código implementa un juego de la serpiente, donde el usuario puede controlar la dirección de la serpiente utilizando gestos capturados por la cámara o, alternativamente, mediante las teclas de flecha del teclado. A continuación se describe cómo funciona el código en detalle.\n\n\nlet imageModelURL = \"https://teachablemachine.withgoogle.com/models/rfrmQGqz_/\";\nlet keyboard_control = false;\nlet speed = 5;\n\nimageModelURL: Esta variable contiene la URL del modelo de Teachable Machine que se utilizará para el reconocimiento de gestos. Este modelo será cargado más adelante en el código.\nkeyboard_control: Define si la serpiente se controla con gestos (false) o con el teclado (true).\nspeed: Establece la velocidad del juego. Un valor más bajo significa que la serpiente se moverá más rápido.\n\n\n\n\nfunction preload() {\n  classifier = ml5.imageClassifier(imageModelURL + \"model.json\");\n}\n\npreload(): Esta función es parte del ciclo de p5.js y se ejecuta antes de setup(). Aquí se carga el modelo de Teachable Machine especificado por imageModelURL. El modelo se utilizará para clasificar las imágenes capturadas por la cámara y determinar la dirección en la que debe moverse la serpiente.\n\n\n\n\nfunction setup() {\n  createCanvas(640, 480);\n  video = createCapture(VIDEO);\n  video.size(320, 240);\n  video.hide();\n  \n  flippedVideo = ml5.flipImage(video);\n  classifyVideo();\n  \n  w = floor(width / rez);\n  h = floor(height / rez);\n  snake = new Snake();\n  foodLocation();\n}\n\nsetup():\n\nSe crea un Canvas de 640x480 píxeles para el juego.\nSe captura el video de la cámara y se ajusta su tamaño a 320x240 píxeles. Este video se oculta porque solo se utiliza para la clasificación.\nml5.flipImage(video): Invierte la imagen del video horizontalmente para que los gestos reflejen movimientos naturales.\nclassifyVideo(): Inicia el proceso de clasificación de video, lo que permite que el modelo detecte gestos en tiempo real.\nSe inicializa la serpiente en el centro del Canvas y se coloca la comida en una posición aleatoria.\n\n\n\n\n\nfunction classifyVideo() {\n  flippedVideo = ml5.flipImage(video);\n  classifier.classify(flippedVideo, gotResult);\n}\n\nclassifyVideo():\n\nVuelve a invertir la imagen del video.\nUtiliza el clasificador (classifier) para analizar el video invertido y determinar el gesto capturado. El resultado se maneja en la función gotResult.\n\n\n\n\n\nfunction gotResult(error, results) {\n  if (error) {\n    console.error(error);\n    return;\n  }\n  label = results[0].label;\n  controlSnake();\n  classifyVideo();\n}\n\ngotResult():\n\nSi ocurre un error durante la clasificación, se muestra en la consola.\nSi no hay error, se actualiza la etiqueta (label) con el resultado de la clasificación, que indica el gesto detectado (por ejemplo, “UP”, “DOWN”).\nSe llama a la función controlSnake() para ajustar la dirección de la serpiente según el gesto detectado.\nSe repite el proceso de clasificación para capturar el siguiente fotograma del video.\n\n\n\n\n\nfunction controlSnake() {\n  if (!keyboard_control) {\n    if (label === \"UP\") {\n      snake.setDir(0, -1);\n    } else if (label === \"RIGHT\") {\n      snake.setDir(1, 0);\n    } else if (label === \"LEFT\") {\n      snake.setDir(-1, 0);\n    } else if (label === \"DOWN\") {\n      snake.setDir(0, 1);\n    }\n  }\n}\n\ncontrolSnake():\n\nSi el control del teclado está desactivado (keyboard_control == false), la dirección de la serpiente se ajusta en función de la etiqueta (label) detectada por el modelo. Por ejemplo, si la etiqueta es “UP”, la serpiente se moverá hacia arriba.\n\n\n\n\n\nfunction draw() {\n  background(220);\n  if (!keyboard_control) {\n    image(flippedVideo, 0, 0, 160, 120);\n    textSize(32);\n    fill(255);\n    stroke(0);\n    text(label, 10, 40);\n  }\n\n  scale(rez);\n  if (snake.eat(food)) {\n    foodLocation();\n    snake.update();\n  }\n  if (frameCount % speed == 0) {\n    snake.update();\n  }\n  snake.show();\n\n  if (snake.endGame()) {\n    print(\"END GAME\");\n    background(255, 0, 0);\n    noLoop();\n  }\n\n  noStroke();\n  fill(255, 0, 0);\n  rect(food.x, food.y, 1, 1);\n}\n\ndraw():\n\nEl Canvas se refresca en cada fotograma.\nSi el control del teclado está desactivado, se muestra la imagen del video invertido junto con la etiqueta del gesto detectado.\nLa serpiente se escala y se dibuja en el Canvas.\nSi la serpiente come la comida, se genera una nueva ubicación para la comida, y la serpiente crece.\nLa velocidad del juego se controla mediante la variable speed, actualizando la posición de la serpiente en función del número de fotogramas.\nSi la serpiente choca con el borde o consigo misma, el juego termina.\n\n\n\n\n\nclass Snake {\n  constructor() {\n    this.body = [];\n    this.body[0] = createVector(floor(w/2), floor(h/2));\n    this.xdir = 0;\n    this.ydir = 0;\n    this.len = 0;\n  }\n\n  setDir(x, y) {\n    this.xdir = x;\n    this.ydir = y;\n  }\n\n  update() {\n    let head = this.body[this.body.length-1].copy();\n    this.body.shift();\n    head.x += this.xdir;\n    head.y += this.ydir;\n    this.body.push(head);\n  }\n\n  grow() {\n    let head = this.body[this.body.length-1].copy();\n    this.len++;\n    this.body.push(head);\n  }\n\n  endGame() {\n    let x = this.body[this.body.length-1].x;\n    let y = this.body[this.body.length-1].y;\n    if(x &gt; w-1 || x &lt; 0 || y &gt; h-1 || y &lt; 0) {\n       return true;\n    }\n    for(let i = 0; i &lt; this.body.length-1; i++) {\n      let part = this.body[i];\n      if(part.x == x && part.y == y) {\n          return true;\n      }\n    }\n    return false;\n  }\n\n  eat(pos) {\n    let x = this.body[this.body.length-1].x;\n    let y = this.body[this.body.length-1].y;\n    if(x == pos.x && y == pos.y) {\n      this.grow();\n      return true;\n    }\n    return false;\n  }\n\n  show() {\n    for(let i = 0; i &lt; this.body.length; i) {\n      fill(0);\n      noStroke();\n      rect(this.body[i].x, this.body[i].y, 1, 1);\n    }\n  }\n}\n\nSnake: Esta clase define la serpiente en el juego.\n\nConstructor: Inicializa la serpiente con un solo segmento ubicado en el centro del Canvas.\nsetDir(x, y): Cambia la dirección de la serpiente según los valores proporcionados para x e y.\nupdate(): Mueve la serpiente en la dirección actual, eliminando el segmento más antiguo y añadiendo uno nuevo en la posición actual de la cabeza.\ngrow(): Añade un nuevo segmento al cuerpo de la serpiente cada vez que come.\nendGame(): Verifica si la serpiente ha chocado con el borde del Canvas o consigo misma, en cuyo caso el juego termina.\neat(pos): Determina si la serpiente ha comido la comida, comprobando si la posición de la cabeza coincide con la de la comida.\nshow(): Dibuja cada segmento del cuerpo de la serpiente en el Canvas.\n\n\n\n\n\nPuedes descargar el código completo acá: Código fuente.",
    "crumbs": [
      "snake-game",
      "Explicación del Código del Juego de la Serpiente en p5.js (Con gestos)"
    ]
  },
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "core",
    "section": "",
    "text": "source\n\nfoo\n\n foo ()",
    "crumbs": [
      "core"
    ]
  },
  {
    "objectID": "snake-game/snake_game_explicacion.html",
    "href": "snake-game/snake_game_explicacion.html",
    "title": "Explicación del Código del Juego de la Serpiente en p5.js",
    "section": "",
    "text": "Esta aplicación es un sencillo juego de la serpiente implementado en p5.js. El objetivo del juego es controlar la serpiente para que coma la comida generada en posiciones aleatorias del campo de juego. A medida que la serpiente come, crece en tamaño, y el juego termina si la serpiente choca consigo misma o con el borde del campo de juego.\n\n1. Definición de Variables\nlet snake;\nlet rez = 20;\nlet food;\nlet w;\nlet h;\n\nsnake: Variable que almacenará la instancia de la serpiente.\nrez: Factor de resolución que escala el juego. Controla el tamaño de la cuadrícula en la que se moverá la serpiente.\nfood: Almacena la posición actual de la comida en el juego.\nw y h**: Representan el ancho y la altura del campo de juego en unidades de juego (no en píxeles).\n\n\n\n2. Clase Snake\nclass Snake {\n  \n  constructor() {\n    this.body = [];\n    this.body[0] = createVector(floor(w/2), floor(h/2));\n    this.xdir = 0;\n    this.ydir = 0;\n    this.len = 0;\n  }\n  \n  setDir(x, y) {\n    this.xdir = x;\n    this.ydir = y;\n  }\n  \n  update() {\n    let head = this.body[this.body.length-1].copy();\n    this.body.shift();\n    head.x += this.xdir;\n    head.y += this.ydir;\n    this.body.push(head);\n  }\n  \n  grow() {\n    let head = this.body[this.body.length-1].copy();\n    this.len++;\n    this.body.push(head);\n  }\n  \n  endGame() {\n    let x = this.body[this.body.length-1].x;\n    let y = this.body[this.body.length-1].y;\n    if(x &gt; w-1 || x &lt; 0 || y &gt; h-1 || y &lt; 0) {\n       return true;\n    }\n    for(let i = 0; i &lt; this.body.length-1; i++) {\n        let part = this.body[i];\n      if(part.x == x && part.y == y) {\n        return true;\n      }\n    }\n    return false;\n  }\n  \n  eat(pos) {\n    let x = this.body[this.body.length-1].x;\n    let y = this.body[this.body.length-1].y;\n    if(x == pos.x && y == pos.y) {\n      this.grow();\n      return true;\n    }\n    return false;\n  }\n  \n  show() {\n    for(let i = 0; i &lt; this.body.length; i++) {\n        fill(0);\n      noStroke();\n      rect(this.body[i].x, this.body[i].y, 1, 1)\n    }\n  }\n\n}\n\nConstructor y Variables de la Clase\n\nconstructor(): Define el comportamiento inicial de la serpiente al crear una instancia.\n\nbody: Es un array que guarda las posiciones de los segmentos de la serpiente. Inicialmente, contiene solo un segmento en el centro del campo de juego.\nxdir y ydir: Definen la dirección en la que se mueve la serpiente. Inicialmente, son 0 para que la serpiente no se mueva.\nlen: Guarda la longitud actual de la serpiente.\n\n\n\n\nMétodos de la Clase\n\nsetDir(x, y): Establece la dirección en la que la serpiente se moverá, basada en las entradas del usuario.\nupdate(): Actualiza la posición de la serpiente:\n\nLa cabeza de la serpiente se mueve en la dirección actual, y se añade una nueva cabeza en la nueva posición.\nEl último segmento de la serpiente (la cola) se elimina, a menos que la serpiente haya comido, en cuyo caso crece.\n\ngrow(): Aumenta la longitud de la serpiente al agregar un nuevo segmento en la posición donde estaba la cabeza.\nendGame(): Comprueba si el juego ha terminado:\n\nEl juego termina si la cabeza de la serpiente choca con los bordes del campo de juego o si se choca consigo misma.\n\neat(pos): Comprueba si la serpiente ha comido la comida:\n\nSi la cabeza de la serpiente está en la misma posición que la comida, la serpiente crece y la función devuelve true. Si no, devuelve false.\n\nshow(): Dibuja la serpiente en el lienzo:\n\nRecorre todos los segmentos del cuerpo de la serpiente y dibuja un rectángulo negro para cada uno.\n\n\n\n\n\n3. Configurar el Entorno\nfunction setup() {\n  createCanvas(400, 400);\n  w = floor(width / rez);\n  h = floor(height / rez);\n  frameRate(5);\n  snake = new Snake();\n  foodLocation();\n}\n\nsetup(): Esta función se ejecuta una vez al principio del programa.\n\ncreateCanvas(400, 400): Crea un lienzo de 400x400 píxeles donde se dibujará el juego.\nw y h: Calculan el ancho y la altura del campo de juego en unidades de juego.\nframeRate(5): Establece la velocidad de actualización del juego a 5 cuadros por segundo.\nsnake = new Snake(): Inicializa una nueva instancia de la serpiente.\nfoodLocation(): Coloca la comida en una ubicación inicial aleatoria.\n\n\n\n\n4. Generar la Ubicación de la Comida\nfunction foodLocation() {\n  let x = floor(random(w));\n  let y = floor(random(h));\n  food = createVector(x, y);\n}\n\nfoodLocation(): Genera una nueva ubicación para la comida dentro de los límites del campo de juego.\n\nx y y: Coordenadas aleatorias dentro del campo de juego.\nfood = createVector(x, y): Crea un vector que almacena la posición de la comida.\n\n\n\n\n5. Control de Teclas\nfunction keyPressed() {\n  if (keyCode === LEFT_ARROW) {\n    snake.setDir(-1, 0);\n  } else if (keyCode === RIGHT_ARROW) {\n    snake.setDir(1, 0);\n  } else if (keyCode === DOWN_ARROW) {\n    snake.setDir(0, 1);\n  } else if (keyCode === UP_ARROW) {\n    snake.setDir(0, -1);\n  } else if (key == ' ') {\n    snake.grow();\n  }\n}\n\nkeyPressed(): Detecta las teclas presionadas y cambia la dirección de la serpiente.\n\nLas flechas (LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW) controlan la dirección de la serpiente.\nLa barra espaciadora (' ') hace que la serpiente crezca.\n\n\n\n\n6. Dibujar el Juego\nfunction draw() {\n  scale(rez);\n  background(220);\n  if (snake.eat(food)) {\n    foodLocation();\n  }\n  snake.update();\n  snake.show();\n\n  if (snake.endGame()) {\n    print(\"END GAME\");\n    background(255, 0, 0);\n    noLoop();\n  }\n\n  noStroke();\n  fill(255, 0, 0);\n  rect(food.x, food.y, 1, 1);\n}\n\ndraw(): Esta función se ejecuta continuamente y se encarga de dibujar en el lienzo.\n\nscale(rez): Escala el dibujo según el factor de resolución.\nbackground(220): Establece un color de fondo para el lienzo.\nif (snake.eat(food)): Verifica si la serpiente ha comido la comida y, si es así, genera una nueva ubicación para la comida.\nsnake.update(): Actualiza la posición de la serpiente.\nsnake.show(): Dibuja la serpiente en el lienzo.\nif (snake.endGame()): Verifica si el juego ha terminado y, de ser así, imprime un mensaje y detiene el juego.\nnoStroke(): Evita que la comida tenga un borde.\nfill(255, 0, 0): Establece el color de la comida a rojo.\nrect(food.x, food.y, 1, 1): Dibuja la comida como un cuadrado rojo.",
    "crumbs": [
      "snake-game",
      "Explicación del Código del Juego de la Serpiente en p5.js"
    ]
  }
]